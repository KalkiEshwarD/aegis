package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.79

import (
	"context"
	"fmt"

	"github.com/balkanid/aegis-backend/graph/generated"
	"github.com/balkanid/aegis-backend/graph/model"
	"github.com/balkanid/aegis-backend/internal/models"
)

// ID is the resolver for the id field.
func (r *fileResolver) ID(ctx context.Context, obj *models.File) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// UploadFile is the resolver for the uploadFile field.
func (r *mutationResolver) UploadFile(ctx context.Context, input model.UploadFileInput) (*models.UserFile, error) {
	panic(fmt.Errorf("not implemented: UploadFile - uploadFile"))
}

// DeleteFile is the resolver for the deleteFile field.
func (r *mutationResolver) DeleteFile(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteFile - deleteFile"))
}

// DownloadFile is the resolver for the downloadFile field.
func (r *mutationResolver) DownloadFile(ctx context.Context, id string) (string, error) {
	panic(fmt.Errorf("not implemented: DownloadFile - downloadFile"))
}

// CreateRoom is the resolver for the createRoom field.
func (r *mutationResolver) CreateRoom(ctx context.Context, input model.CreateRoomInput) (*models.Room, error) {
	panic(fmt.Errorf("not implemented: CreateRoom - createRoom"))
}

// AddRoomMember is the resolver for the addRoomMember field.
func (r *mutationResolver) AddRoomMember(ctx context.Context, input model.AddRoomMemberInput) (bool, error) {
	panic(fmt.Errorf("not implemented: AddRoomMember - addRoomMember"))
}

// RemoveRoomMember is the resolver for the removeRoomMember field.
func (r *mutationResolver) RemoveRoomMember(ctx context.Context, roomID string, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveRoomMember - removeRoomMember"))
}

// ShareFileToRoom is the resolver for the shareFileToRoom field.
func (r *mutationResolver) ShareFileToRoom(ctx context.Context, userFileID string, roomID string) (bool, error) {
	panic(fmt.Errorf("not implemented: ShareFileToRoom - shareFileToRoom"))
}

// RemoveFileFromRoom is the resolver for the removeFileFromRoom field.
func (r *mutationResolver) RemoveFileFromRoom(ctx context.Context, userFileID string, roomID string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveFileFromRoom - removeFileFromRoom"))
}

// PromoteUserToAdmin is the resolver for the promoteUserToAdmin field.
func (r *mutationResolver) PromoteUserToAdmin(ctx context.Context, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: PromoteUserToAdmin - promoteUserToAdmin"))
}

// DeleteUserAccount is the resolver for the deleteUserAccount field.
func (r *mutationResolver) DeleteUserAccount(ctx context.Context, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUserAccount - deleteUserAccount"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// MyFiles is the resolver for the myFiles field.
func (r *queryResolver) MyFiles(ctx context.Context, filter *model.FileFilterInput) ([]*models.UserFile, error) {
	panic(fmt.Errorf("not implemented: MyFiles - myFiles"))
}

// MyStats is the resolver for the myStats field.
func (r *queryResolver) MyStats(ctx context.Context) (*model.UserStats, error) {
	panic(fmt.Errorf("not implemented: MyStats - myStats"))
}

// MyRooms is the resolver for the myRooms field.
func (r *queryResolver) MyRooms(ctx context.Context) ([]*models.Room, error) {
	panic(fmt.Errorf("not implemented: MyRooms - myRooms"))
}

// Room is the resolver for the room field.
func (r *queryResolver) Room(ctx context.Context, id string) (*models.Room, error) {
	panic(fmt.Errorf("not implemented: Room - room"))
}

// AdminDashboard is the resolver for the adminDashboard field.
func (r *queryResolver) AdminDashboard(ctx context.Context) (*model.AdminDashboard, error) {
	panic(fmt.Errorf("not implemented: AdminDashboard - adminDashboard"))
}

// AllUsers is the resolver for the allUsers field.
func (r *queryResolver) AllUsers(ctx context.Context) ([]*models.User, error) {
	panic(fmt.Errorf("not implemented: AllUsers - allUsers"))
}

// AllFiles is the resolver for the allFiles field.
func (r *queryResolver) AllFiles(ctx context.Context) ([]*models.UserFile, error) {
	panic(fmt.Errorf("not implemented: AllFiles - allFiles"))
}

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: Health - health"))
}

// ID is the resolver for the id field.
func (r *roomResolver) ID(ctx context.Context, obj *models.Room) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CreatorID is the resolver for the creator_id field.
func (r *roomResolver) CreatorID(ctx context.Context, obj *models.Room) (string, error) {
	panic(fmt.Errorf("not implemented: CreatorID - creator_id"))
}

// Members is the resolver for the members field.
func (r *roomResolver) Members(ctx context.Context, obj *models.Room) ([]*models.RoomMember, error) {
	panic(fmt.Errorf("not implemented: Members - members"))
}

// Files is the resolver for the files field.
func (r *roomResolver) Files(ctx context.Context, obj *models.Room) ([]*models.UserFile, error) {
	panic(fmt.Errorf("not implemented: Files - files"))
}

// ID is the resolver for the id field.
func (r *roomMemberResolver) ID(ctx context.Context, obj *models.RoomMember) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// RoomID is the resolver for the room_id field.
func (r *roomMemberResolver) RoomID(ctx context.Context, obj *models.RoomMember) (string, error) {
	panic(fmt.Errorf("not implemented: RoomID - room_id"))
}

// UserID is the resolver for the user_id field.
func (r *roomMemberResolver) UserID(ctx context.Context, obj *models.RoomMember) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - user_id"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *userFileResolver) ID(ctx context.Context, obj *models.UserFile) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserID is the resolver for the user_id field.
func (r *userFileResolver) UserID(ctx context.Context, obj *models.UserFile) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - user_id"))
}

// FileID is the resolver for the file_id field.
func (r *userFileResolver) FileID(ctx context.Context, obj *models.UserFile) (string, error) {
	panic(fmt.Errorf("not implemented: FileID - file_id"))
}

// File returns generated.FileResolver implementation.
func (r *Resolver) File() generated.FileResolver { return &fileResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Room returns generated.RoomResolver implementation.
func (r *Resolver) Room() generated.RoomResolver { return &roomResolver{r} }

// RoomMember returns generated.RoomMemberResolver implementation.
func (r *Resolver) RoomMember() generated.RoomMemberResolver { return &roomMemberResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

// UserFile returns generated.UserFileResolver implementation.
func (r *Resolver) UserFile() generated.UserFileResolver { return &userFileResolver{r} }

type fileResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type roomResolver struct{ *Resolver }
type roomMemberResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type userFileResolver struct{ *Resolver }
