// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/balkanid/aegis-backend/internal/models"
)

type AccessSharedFileInput struct {
	Token          string  `json:"token"`
	MasterPassword *string `json:"master_password,omitempty"`
}

type AccessStats struct {
	TotalAttempts      int `json:"total_attempts"`
	SuccessfulAttempts int `json:"successful_attempts"`
	FailedAttempts     int `json:"failed_attempts"`
	RecentAttempts     int `json:"recent_attempts"`
	UniqueIps          int `json:"unique_ips"`
}

type AddRoomMemberInput struct {
	RoomID   string          `json:"room_id"`
	Username string          `json:"username"`
	Role     models.RoomRole `json:"role"`
}

type AdminDashboard struct {
	TotalUsers       int                `json:"total_users"`
	TotalFiles       int                `json:"total_files"`
	TotalStorageUsed int                `json:"total_storage_used"`
	RecentUploads    []*models.UserFile `json:"recent_uploads"`
}

type AuthPayload struct {
	Token string       `json:"token"`
	User  *models.User `json:"user"`
}

type CreateFileShareInput struct {
	UserFileID     string     `json:"user_file_id"`
	MasterPassword *string    `json:"master_password,omitempty"`
	MaxDownloads   *int       `json:"max_downloads,omitempty"`
	ExpiresAt      *time.Time `json:"expires_at,omitempty"`
	AllowedEmails  []string   `json:"allowed_emails,omitempty"`
}

type CreateFolderInput struct {
	Name     string  `json:"name"`
	ParentID *string `json:"parent_id,omitempty"`
}

type CreateRoomInput struct {
	Name string `json:"name"`
}

type DeleteRoomInput struct {
	RoomID string `json:"room_id"`
}

type FileFilterInput struct {
	Filename       *string    `json:"filename,omitempty"`
	MimeType       *string    `json:"mime_type,omitempty"`
	MinSize        *int       `json:"min_size,omitempty"`
	MaxSize        *int       `json:"max_size,omitempty"`
	DateFrom       *time.Time `json:"date_from,omitempty"`
	DateTo         *time.Time `json:"date_to,omitempty"`
	IncludeTrashed *bool      `json:"includeTrashed,omitempty"`
	FolderID       *string    `json:"folder_id,omitempty"`
}

type KeyRotationResult struct {
	RotationID         string            `json:"rotation_id"`
	Status             KeyRotationStatus `json:"status"`
	TotalFilesAffected int               `json:"total_files_affected"`
	FilesProcessed     int               `json:"files_processed"`
	ErrorMessage       *string           `json:"error_message,omitempty"`
}

type LoginInput struct {
	Identifier string `json:"identifier"`
	Password   string `json:"password"`
}

type MoveFileInput struct {
	ID       string  `json:"id"`
	FolderID *string `json:"folder_id,omitempty"`
}

type MoveFolderInput struct {
	ID       string  `json:"id"`
	ParentID *string `json:"parent_id,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type RegisterInput struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type RenameFolderInput struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type ShareExpiryInfo struct {
	Expires         bool       `json:"expires"`
	Expired         bool       `json:"expired"`
	ExpiresAt       *time.Time `json:"expires_at,omitempty"`
	TimeUntilExpiry *string    `json:"time_until_expiry,omitempty"`
}

type ShareFolderToRoomInput struct {
	FolderID string `json:"folder_id"`
	RoomID   string `json:"room_id"`
}

type ShareMetadata struct {
	Token            string     `json:"token"`
	Filename         string     `json:"filename"`
	MimeType         string     `json:"mime_type"`
	SizeBytes        int        `json:"size_bytes"`
	MaxDownloads     int        `json:"max_downloads"`
	DownloadCount    int        `json:"download_count"`
	ExpiresAt        *time.Time `json:"expires_at,omitempty"`
	CreatedAt        time.Time  `json:"created_at"`
	RequiresPassword bool       `json:"requires_password"`
}

type SharedWithMeFile struct {
	ID            string       `json:"id"`
	Filename      string       `json:"filename"`
	MimeType      string       `json:"mime_type"`
	SizeBytes     int          `json:"size_bytes"`
	ShareToken    string       `json:"share_token"`
	SharedBy      *models.User `json:"shared_by"`
	FirstAccessAt time.Time    `json:"first_access_at"`
	LastAccessAt  time.Time    `json:"last_access_at"`
	AccessCount   int          `json:"access_count"`
	MaxDownloads  int          `json:"max_downloads"`
	DownloadCount int          `json:"download_count"`
	ExpiresAt     *time.Time   `json:"expires_at,omitempty"`
	CreatedAt     time.Time    `json:"created_at"`
}

type UpdateFileShareInput struct {
	ShareID        string     `json:"share_id"`
	MasterPassword *string    `json:"master_password,omitempty"`
	MaxDownloads   *int       `json:"max_downloads,omitempty"`
	ExpiresAt      *time.Time `json:"expires_at,omitempty"`
	AllowedEmails  []string   `json:"allowed_emails,omitempty"`
}

type UpdateProfileInput struct {
	Username        *string `json:"username,omitempty"`
	Email           *string `json:"email,omitempty"`
	CurrentPassword *string `json:"currentPassword,omitempty"`
	NewPassword     *string `json:"newPassword,omitempty"`
}

type UpdateRoomInput struct {
	RoomID string `json:"room_id"`
	Name   string `json:"name"`
}

type UpdateRoomMemberRoleInput struct {
	RoomID string          `json:"room_id"`
	UserID string          `json:"user_id"`
	Role   models.RoomRole `json:"role"`
}

type UploadFileFromMapInput struct {
	Data string `json:"data"`
}

type UploadFileInput struct {
	Filename     string         `json:"filename"`
	ContentHash  string         `json:"content_hash"`
	SizeBytes    int            `json:"size_bytes"`
	MimeType     string         `json:"mime_type"`
	EncryptedKey string         `json:"encrypted_key"`
	FolderID     *string        `json:"folder_id,omitempty"`
	FileData     graphql.Upload `json:"file_data"`
}

type UserStats struct {
	TotalFiles     int `json:"total_files"`
	UsedStorage    int `json:"used_storage"`
	StorageQuota   int `json:"storage_quota"`
	StorageSavings int `json:"storage_savings"`
}

type KeyRotationStatus string

const (
	KeyRotationStatusPending    KeyRotationStatus = "PENDING"
	KeyRotationStatusInProgress KeyRotationStatus = "IN_PROGRESS"
	KeyRotationStatusCompleted  KeyRotationStatus = "COMPLETED"
	KeyRotationStatusFailed     KeyRotationStatus = "FAILED"
	KeyRotationStatusRolledBack KeyRotationStatus = "ROLLED_BACK"
)

var AllKeyRotationStatus = []KeyRotationStatus{
	KeyRotationStatusPending,
	KeyRotationStatusInProgress,
	KeyRotationStatusCompleted,
	KeyRotationStatusFailed,
	KeyRotationStatusRolledBack,
}

func (e KeyRotationStatus) IsValid() bool {
	switch e {
	case KeyRotationStatusPending, KeyRotationStatusInProgress, KeyRotationStatusCompleted, KeyRotationStatusFailed, KeyRotationStatusRolledBack:
		return true
	}
	return false
}

func (e KeyRotationStatus) String() string {
	return string(e)
}

func (e *KeyRotationStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KeyRotationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KeyRotationStatus", str)
	}
	return nil
}

func (e KeyRotationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *KeyRotationStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e KeyRotationStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
