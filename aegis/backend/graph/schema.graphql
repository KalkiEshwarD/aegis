# GraphQL schema for Aegis File Vault

scalar Time
scalar Upload

# User authentication types
type User {
  id: ID!
  username: String!
  email: String!
  storage_quota: Int!
  used_storage: Int!
  is_admin: Boolean!
  created_at: Time!
}

type AuthPayload {
  token: String!
  user: User!
}

# File-related types
type File {
  id: ID!
  content_hash: String!
  size_bytes: Int!
  created_at: Time!
}

type UserFile {
  id: ID!
  user_id: ID!
  file_id: ID!
  filename: String!
  mime_type: String!
  encryption_key: String!
  folder_id: ID
  created_at: Time!
  updated_at: Time!
  user: User
  file: File
  folder: Folder
}

# Folder types
type Folder {
  id: ID!
  user_id: ID!
  name: String!
  parent_id: ID
  created_at: Time!
  updated_at: Time!
  user: User
  parent: Folder
  children: [Folder!]!
  files: [UserFile!]!
}

# Room collaboration types
enum RoomRole {
  ADMIN
  CONTENT_CREATOR
  CONTENT_EDITOR
  CONTENT_VIEWER
}

type Room {
  id: ID!
  name: String!
  creator_id: ID!
  created_at: Time!
  creator: User
  members: [RoomMember!]!
  files: [UserFile!]!
  folders: [Folder!]!
}

type RoomMember {
  id: ID!
  room_id: ID!
  user_id: ID!
  role: RoomRole!
  created_at: Time!
  room: Room
  user: User
}

# Input types
input RegisterInput {
  username: String!
  email: String!
  password: String!
}

input LoginInput {
  identifier: String!
  password: String!
}

input UploadFileInput {
  filename: String!
  content_hash: String!
  size_bytes: Int!
  mime_type: String!
  encrypted_key: String!
  folder_id: ID
  file_data: Upload!
}

# Generic input for map-based uploads (solves map[string]interface{} conversion issue)
input UploadFileFromMapInput {
  data: String! # JSON string containing upload data
}

input FileFilterInput {
  filename: String
  mime_type: String
  min_size: Int
  max_size: Int
  date_from: Time
  date_to: Time
  includeTrashed: Boolean
  folder_id: ID
}

input CreateRoomInput {
  name: String!
}

input AddRoomMemberInput {
  room_id: ID!
  user_id: ID!
  role: RoomRole!
}

# Folder input types
input CreateFolderInput {
  name: String!
  parent_id: ID
}

input RenameFolderInput {
  id: ID!
  name: String!
}

input MoveFolderInput {
  id: ID!
  parent_id: ID
}

input MoveFileInput {
  id: ID!
  folder_id: ID
}

input ShareFolderToRoomInput {
  folder_id: ID!
  room_id: ID!
}

# File sharing input types
input CreateFileShareInput {
  user_file_id: ID!
  master_password: String!
  max_downloads: Int
  expires_at: Time
}

input AccessSharedFileInput {
  token: String!
  master_password: String!
}

# Statistics and admin types
type UserStats {
  total_files: Int!
  used_storage: Int!
  storage_quota: Int!
  storage_savings: Int!
}

type AdminDashboard {
  total_users: Int!
  total_files: Int!
  total_storage_used: Int!
  recent_uploads: [UserFile!]!
}

# File sharing types
type FileShare {
  id: ID!
  user_file_id: ID!
  share_token: String!
  encrypted_key: String!
  salt: String!
  iv: String!
  max_downloads: Int!
  download_count: Int!
  expires_at: Time
  created_at: Time!
  updated_at: Time!
  user_file: UserFile
}

type ShareMetadata {
  token: String!
  filename: String!
  mime_type: String!
  size_bytes: Int!
  max_downloads: Int!
  download_count: Int!
  expires_at: Time
  created_at: Time!
}

type ShareExpiryInfo {
  expires: Boolean!
  expired: Boolean!
  expires_at: Time
  time_until_expiry: String
}

type AccessStats {
  total_attempts: Int!
  successful_attempts: Int!
  failed_attempts: Int!
  recent_attempts: Int!
  unique_ips: Int!
}

# Root types
type Query {
  # User queries
  me: User!
  myFiles(filter: FileFilterInput): [UserFile!]!
  myTrashedFiles: [UserFile!]!
  myStats: UserStats!

  # Room queries
  myRooms: [Room!]!
  room(id: ID!): Room

  # Folder queries
  myFolders: [Folder!]!
  folder(id: ID!): Folder

  # File sharing queries
  myShares: [FileShare!]!
  shareMetadata(token: String!): ShareMetadata!
  shareExpiryInfo(token: String!): ShareExpiryInfo!
  shareAccessStats(share_id: ID!): AccessStats!

  # Admin queries
  adminDashboard: AdminDashboard!
  allUsers: [User!]!
  allFiles: [UserFile!]!

  # Health check
  health: String!
}

type Mutation {
  # Authentication
  register(input: RegisterInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  refreshToken: AuthPayload!
  logout: Boolean!

  # File operations
  uploadFile(input: UploadFileInput!): UserFile!
  uploadFileFromMap(input: UploadFileFromMapInput!): UserFile! # Solution for map conversion
  deleteFile(id: ID!): Boolean!
  restoreFile(fileID: ID!): Boolean!
  permanentlyDeleteFile(fileID: ID!): Boolean!
  downloadFile(id: ID!): String! # Returns download URL

  # Room operations
  createRoom(input: CreateRoomInput!): Room!
  addRoomMember(input: AddRoomMemberInput!): Boolean!
  removeRoomMember(room_id: ID!, user_id: ID!): Boolean!
  shareFileToRoom(user_file_id: ID!, room_id: ID!): Boolean!
  removeFileFromRoom(user_file_id: ID!, room_id: ID!): Boolean!

  # Folder operations
  createFolder(input: CreateFolderInput!): Folder!
  renameFolder(input: RenameFolderInput!): Boolean!
  deleteFolder(id: ID!): Boolean!
  moveFolder(input: MoveFolderInput!): Boolean!
  moveFile(input: MoveFileInput!): Boolean!
  shareFolderToRoom(input: ShareFolderToRoomInput!): Boolean!
  removeFolderFromRoom(folder_id: ID!, room_id: ID!): Boolean!

  # File sharing operations
  createFileShare(input: CreateFileShareInput!): FileShare!
  deleteFileShare(share_id: ID!): Boolean!
  accessSharedFile(input: AccessSharedFileInput!): String! # Returns download URL

  # Admin operations
  promoteUserToAdmin(user_id: ID!): Boolean!
  deleteUserAccount(user_id: ID!): Boolean!
}
